@use "sass:map";
@use "theme";
@use "functions";

* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

body {
	background-color: map.get(theme.$colors, main);
	color: map.get(theme.$colors, white);
}

.content-wrapper {
	display: flex;

	width: clamp(functions.rem(320), 90vw, functions.rem(1280));
	margin-left: auto;
	margin-right: auto;
	padding-left: 1.5rem;
	padding-right: 1.5rem;

	&.bigger {
		width: clamp(functions.rem(768), 90vw, functions.rem(1560));
	}

	@media (min-width: functions.rem(1920)) {
		width: clamp(functions.rem(320), 90vw, functions.rem(1440));

		&.bigger {
			width: clamp(functions.rem(320), 90vw, functions.rem(1752));
		}
	}
}

body.htmx-swapping > main {
	opacity: 0;
}
body.htmx-added > main {
	opacity: 0;
}
body > main {
	opacity: 1;
	transition: opacity 250ms cubic-bezier(0.39, 0.575, 0.565, 1);
}

[hx-get],
[hx-post] {
	cursor: pointer;
}

.background-wrapper-fixed {
	display: flex;

	position: absolute;

	z-index: -1;

	width: 100%;
	height: 200%;

	animation: background-fade-in 2500ms ease-out;
	animation-fill-mode: forwards;

	overflow: hidden;

	.mirror {
		position: absolute;

		z-index: 2;

		width: 100%;
		height: 100%;

		backdrop-filter: saturate(0.9) blur(functions.rem(75)) opacity(1);
	}

	.content {
		position: absolute;

		z-index: 1;

		background-color: map.get(theme.$colors, main);

		width: 100%;
		height: 100%;

		img {
			position: absolute;

			object-fit: cover;
			width: functions.rem(500);
			height: auto;

			&:nth-of-type(1) {
				// transform: rotate3d(0, 0, 1, 0deg) scale3d(1, 1, 1);
				top: 12.5%;
				left: 7.5%;

				// animation: rotate-blob-1 5000ms linear infinite;
				// animation-fill-mode: forwards;

				animation: blob-breathe 5000ms cubic-bezier(0.25, 0.46, 0.45, 0.94)
					infinite;
			}

			&:nth-of-type(2) {
				right: 7.5%;
				top: 45%;

				@media (max-width: 700px) {
					right: unset;
					left: 7.5%;
				}

				// animation: rotate-blob-2 5000ms linear infinite;
				// animation-fill-mode: both;

				animation: blob-breathe 5000ms cubic-bezier(0.25, 0.46, 0.45, 0.94)
					infinite;
			}
		}
	}
}

@keyframes background-fade-in {
	0% {
		opacity: 0;
	}
	100% {
		opacity: 1;
	}
}

@keyframes rotate-blob-1 {
	0% {
		transform: rotate3d(0, 0, 1, 0deg) scale3d(0.8, 0.8, 0.8);
	}
	50% {
		transform: rotate3d(0, 1, 0, -7deg) scale3d(1.1, 1.1, 1.1);
	}
	100% {
		transform: rotate3d(0, 0, 1, 0deg) scale3d(0.8, 0.8, 0.8);
	}
}

@keyframes rotate-blob-2 {
	0% {
		transform: rotate3d(0, 0, 1, 0deg) scale3d(0.8, 0.8, 0.8);
	}
	50% {
		transform: rotate3d(0, 1, 0, 7deg) scale3d(1.1, 1.1, 1.1);
	}
	100% {
		transform: rotate3d(0, 0, 1, 0deg) scale3d(0.8, 0.8, 0.8);
	}
}

@keyframes blob-breathe {
	0% {
		transform: scale(0.8);
	}
	50% {
		transform: scale(1.1);
	}
	100% {
		transform: scale(0.8);
	}
}

.skeleton {
	display: flex;
	justify-content: end;
	align-items: center;

	position: absolute;

	width: 100%;
	height: 100%;

	background-color: rgb(143, 143, 143);

	// animation-fill-mode: forwards;

	&::before {
		content: "";

		height: 200%;
		width: 300%;

		position: absolute;

		background: linear-gradient(
			90deg,
			rgb(143, 143, 143) 0%,
			rgb(195, 195, 195) 50%,
			rgb(143, 143, 143) 100%
		);

		animation: skeleton 4000ms infinite cubic-bezier(0.455, 0.03, 0.515, 0.955);
		animation-fill-mode: both;
	}
}

@keyframes skeleton {
	0% {
		transform: translate3d(0, 0, 0);
	}
	50% {
		transform: translate3d(66%, 0, 0);
	}
	100% {
		transform: translate3d(0, 0, 0);
	}
}

divider-horizontal {
	display: flex;

	width: 100%;
	height: functions.rem(3);
	background-color: map.get(theme.$colors, white);
}

button {
	display: flex;
	justify-content: center;
	align-items: center;
	gap: functions.rem(15);

	padding: functions.rem(12) functions.rem(25);

	background-color: map.get(theme.$colors, primary);
	border: functions.rem(1) solid map.get(theme.$colors, primary);
	color: map.get(theme.$colors, white);

	cursor: pointer;

	transition: background-color 125ms ease-in-out;

	&:hover {
		background-color: darken(map.get(theme.$colors, primary), 2.5%);
	}
}

mark {
	background-color: map.get(theme.$colors, primary);
	color: map.get(theme.$colors, white);
	padding: functions.rem(2) functions.rem(7) functions.rem(4);
}

::marker {
	color: map.get(theme.$colors, primary);
}
