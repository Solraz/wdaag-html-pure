@use "mixins" as m;

* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

body {
	background-color: m.get(m.$colors, black);
	color: m.get(m.$colors, white);
}

main {
	z-index: 2;
	position: relative;

	left: 0;

	transition: transform 250ms linear, left 250ms linear;
	transform-origin: left;
}

.content-wrapper {
	display: flex;

	width: clamp(m.rem(320), 90vw, m.rem(1280));
	margin-left: auto;
	margin-right: auto;
	padding-left: 1.5rem;
	padding-right: 1.5rem;

	&.bigger {
		width: clamp(m.rem(768), 90vw, m.rem(1560));
	}

	&.smaller {
		width: clamp(m.rem(320), 90vw, m.rem(900));
	}

	// @media (min-width: m.rem(1920)) {
	// 	width: clamp(m.rem(320), 90vw, m.rem(1440));

	// 	&.bigger {
	// 		width: clamp(m.rem(320), 90vw, m.rem(1752));
	// 	}
	// }
}
body {
	> main {
		opacity: 1;
		transition: opacity 500ms cubic-bezier(0.165, 0.84, 0.44, 1);

		&.htmx-swapping {
			opacity: 0;
			transition: opacity 250ms ease-out, transform 250ms ease-in;
		}

		&.htmx-settling {
			opacity: 0;
			transition: opacity 250ms ease-out, transform 250ms ease-in;
		}
	}
}

[hx-get],
[hx-post] {
	cursor: pointer;
}

.background-wrapper-fixed {
	display: flex;

	position: absolute;

	background-color: m.get(m.$colors, black);

	z-index: -1;

	width: 100%;
	height: 100%;

	overflow: hidden;

	.mirror {
		position: absolute;

		z-index: 2;

		width: 100%;
		height: 100%;

		backdrop-filter: saturate(0.9) blur(m.rem(55)) opacity(1);
	}

	.content {
		position: absolute;
		right: 0;

		z-index: 1;

		animation: background-fade-in 2500ms ease-out;
		animation-fill-mode: forwards;

		svg {
			position: absolute;
			z-index: 5;

			top: m.rem(200);
			right: 7.5%;

			width: 100%;
			height: 100%;

			animation: rotate-blob-1 5000ms cubic-bezier(0.25, 0.46, 0.45, 0.94)
				infinite;
		}

		img {
			position: relative;

			object-fit: cover;
			width: m.rem(600);
			height: auto;

			&:nth-of-type(1) {
				// transform: rotate3d(0, 0, 1, 0deg) scale3d(1, 1, 1);
				top: m.rem(200);
				right: 7.5%;

				// animation: rotate-blob-1 5000ms linear infinite;
				// animation-fill-mode: forwards;

				animation: rotate-blob-1 5000ms cubic-bezier(0.25, 0.46, 0.45, 0.94)
					infinite;
			}

			&:nth-of-type(2) {
				display: none;
				right: 7.5%;
				top: m.rem(650);

				@media (max-width: 700px) {
					right: unset;
					left: 7.5%;
				}

				// animation: rotate-blob-2 5000ms linear infinite;
				// animation-fill-mode: both;

				animation: rotate-blob-1 5000ms cubic-bezier(0.25, 0.46, 0.45, 0.94)
					infinite;
			}
		}
	}
}

@keyframes background-fade-in {
	0% {
		opacity: 0;
	}
	100% {
		opacity: 1;
	}
}

@keyframes rotate-blob-1 {
	0% {
		transform: rotate3d(0, 0, 1, 0deg) scale3d(1, 1, 1);
	}
	50% {
		transform: rotate3d(0, 1, 0, -7deg) scale3d(1.1, 1.1, 1.1);
	}
	100% {
		transform: rotate3d(0, 0, 1, 0deg) scale3d(1, 1, 1);
	}
}

@keyframes rotate-blob-2 {
	0% {
		transform: rotate3d(0, 0, 1, 0deg) scale3d(0.8, 0.8, 0.8);
	}
	50% {
		transform: rotate3d(0, 1, 0, 7deg) scale3d(1.1, 1.1, 1.1);
	}
	100% {
		transform: rotate3d(0, 0, 1, 0deg) scale3d(0.8, 0.8, 0.8);
	}
}

@keyframes blob-breathe {
	0% {
		transform: scale(1);
	}
	50% {
		transform: scale(1.1);
	}
	100% {
		transform: scale(1);
	}
}

.skeleton {
	display: flex;
	justify-content: end;
	align-items: center;

	position: absolute;

	width: 100%;
	height: 100%;

	background-color: rgb(143, 143, 143);

	// animation-fill-mode: forwards;

	&::before {
		content: "";

		height: 200%;
		width: 300%;

		position: absolute;

		background: linear-gradient(
			90deg,
			rgb(143, 143, 143) 0%,
			rgb(195, 195, 195) 50%,
			rgb(143, 143, 143) 100%
		);

		animation: skeleton 4000ms infinite cubic-bezier(0.455, 0.03, 0.515, 0.955);
		animation-fill-mode: both;
	}
}

@keyframes skeleton {
	0% {
		transform: translate3d(0, 0, 0);
	}
	50% {
		transform: translate3d(66%, 0, 0);
	}
	100% {
		transform: translate3d(0, 0, 0);
	}
}

divider-horizontal {
	display: flex;

	width: 100%;
	height: m.rem(2);
	background-color: m.get(m.$colors, primary);
}

button {
	display: flex;
	justify-content: center;
	align-items: center;
	gap: m.rem(15);

	padding: m.rem(12) m.rem(25);

	background-color: m.get(m.$colors, primary);
	border: m.rem(1) solid m.get(m.$colors, primary);
	color: m.get(m.$colors, white);

	cursor: pointer;

	transition: background-color 125ms ease-in-out;

	&:hover {
		background-color: darken(m.get(m.$colors, primary), 2.5%);
	}
}

mark {
	background-color: m.get(m.$colors, primary);
	color: m.get(m.$colors, white);
	padding: m.rem(0) m.rem(5) m.rem(4);
}

::marker {
	color: m.get(m.$colors, primary);
}
